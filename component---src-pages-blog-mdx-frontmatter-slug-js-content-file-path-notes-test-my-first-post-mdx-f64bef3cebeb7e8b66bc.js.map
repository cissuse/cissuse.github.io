{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-notes-test-my-first-post-mdx-f64bef3cebeb7e8b66bc.js","mappings":"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","sources":["webpack://cissuse.github.io/./notes/test/my-first-post.mdx","webpack://cissuse.github.io/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://cissuse.github.io/./src/components/seo.js","webpack://cissuse.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"This is my first blog post! Isn't it \", React.createElement(_components.em, null, \"great\"), \"?\"), \"\\n\", React.createElement(_components.p, null, \"Some of my \", React.createElement(_components.strong, null, \"favorite\"), \" things are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Petting dogs\"), \"\\n\", React.createElement(_components.li, null, \"Singing\"), \"\\n\", React.createElement(_components.li, null, \"Eating potato-based foods\"), \"\\n\"), \"\\n\", React.createElement(_components.h1, null, \"12\"), \"\\n\", React.createElement(_components.h2, null, \"22\"), \"\\n\", React.createElement(_components.h3, null, \"32\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/Users/Moony/Desktop/cissuse-blog/notes/test/my-first-post.mdx\";\nimport * as React from \"react\";\nimport Seo from \"../../components/seo\";\nimport {graphql} from \"gatsby\";\nimport Layout from \"../../components/layout\";\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, null, React.createElement(\"div\", null, React.createElement(\"p\", null, data.mdx.frontmatter.date), children));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction Seo({ description, title, children }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","strong","ul","li","h1","h2","h3","_provideComponents","components","React","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","mdx","frontmatter","date","Head","_ref2","Seo","title","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","_site$siteMetadata","_site$siteMetadata2","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}